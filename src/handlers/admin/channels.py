from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils import markdown
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, Message, CallbackQuery

from src.database.channel import get_all_channels, save_channel, delete_channel, get_channel_or_none, toggle_auto_accept
from src.misc.callback_data import channels_list_callback
from src.misc.admin_states import ChannelAdding


class Messages:
    @staticmethod
    def get_channel_description(channel_id: int) -> str:
        channel = get_channel_or_none(channel_id)
        result = (
            f'<b>{markdown.quote_html(channel.title)}</b> \n\n'
            f'<b>üÜî –∫–∞–Ω–∞–ª–∞:</b> <code>{channel.channel_id}</code> \n'
            f'<b>üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> \n{channel.url} \n\n'
            f'üëå –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –±–æ—Ç–æ–º: <b>{"–î–∞" if channel.auto_accept else "–ù–µ—Ç"}</b>'
        )
        return result


class Keyboards:
    reply_button_for_admin_menu = KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ üìã')
    inline_cancel_button = InlineKeyboardButton(
        'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=channels_list_callback.new(action='cancel', channel_id='')
    )

    @staticmethod
    def get_edit_channel(channel_id):
        markup = InlineKeyboardMarkup()

        channel = get_channel_or_none(channel_id)
        auto_accept_button_text = '‚ùå –ê–≤—Ç–æ–ø—Ä–∏—ë–º' if channel.auto_accept else '‚úÖ –ê–≤—Ç–æ–ø—Ä–∏—ë–º'
        markup.add(
            InlineKeyboardButton(
                text=auto_accept_button_text,
                callback_data=channels_list_callback.new(action='toggle_auto_accept', channel_id=channel_id)
            )
        )

        markup.row(Keyboards.inline_cancel_button)
        return markup

    @staticmethod
    def get_channels_list() -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup()

        for channel in get_all_channels():
            markup.row(InlineKeyboardButton(
                text=channel.title,
                callback_data=channels_list_callback.new(action='show', channel_id=channel.channel_id))
            )

        markup.add(
            InlineKeyboardButton(text='‚ûï', callback_data=channels_list_callback.new(action='add', channel_id='')),
            InlineKeyboardMarkup(text='‚ûñ', callback_data=channels_list_callback.new(action='delete', channel_id=''))
        )
        return markup

    @staticmethod
    def get_channels_to_delete() -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup(row_width=1)

        for channel in get_all_channels():
            markup.add(InlineKeyboardButton(
                text=f'‚ùå {channel.title}',
                callback_data=channels_list_callback.new(action='delete', channel_id=channel.channel_id))
            )

        markup.add(Keyboards.inline_cancel_button)
        return markup

    @staticmethod
    def get_cancel() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup().add(Keyboards.inline_cancel_button)


class Handlers:
    @staticmethod
    async def handle_channels_list_button(message: Message):
        await message.answer(text='üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:', reply_markup=Keyboards.get_channels_list())

    # –û—Ç–º–µ–Ω–∞
    @staticmethod
    async def handle_cancel_callback(callback: CallbackQuery, state: FSMContext):
        await state.finish()
        await callback.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')
        await callback.message.delete()
        await Handlers.handle_channels_list_button(callback.message)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑
    @staticmethod
    async def handle_show_channel_callback(callback: CallbackQuery, callback_data: dict):
        channel_id = callback_data.get('channel_id')
        await callback.message.edit_text(
            text=Messages.get_channel_description(channel_id),
            reply_markup=Keyboards.get_edit_channel(channel_id)
        )

    @staticmethod
    async def handle_toggle_auto_accept_callback(callback: CallbackQuery, callback_data: dict):
        channel_id = callback_data.get('channel_id')
        toggle_auto_accept(channel_id)

        await callback.message.edit_text(
            text=Messages.get_channel_description(channel_id),
            reply_markup=Keyboards.get_edit_channel(channel_id)
        )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    @staticmethod
    async def handle_add_channel_to_list_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            text='‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b> ‚ûï \n\n'
                 '1) –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏ –¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞: \n<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - ‚úî</b> \n'
                 '2) –ü–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–π <b>—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç</b> –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:',
            reply_markup=Keyboards.get_cancel()
        )
        await state.set_state(ChannelAdding.wait_for_post)

    @staticmethod
    async def handle_channel_to_add_post_message(message: Message, state: FSMContext):
        if message.forward_from_chat.type not in ['group', 'channel']:
            await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: ')
            return

        chat = message.forward_from_chat

        await state.update_data(chat_id=chat.id, chat_title=chat.title)
        await message.answer('–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. \n'
                             '‚Äº–ü–æ—Å—Ç–∞–≤—å—Ç–µ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ - ‚úî</b> \n\n'
                             '–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É:')
        await state.set_state(ChannelAdding.wait_for_url)

    @staticmethod
    async def handle_channel_to_add_url(message: Message, state: FSMContext):
        if message.entities and message.entities[0].type == 'url':
            url = message.entities[0].get_text(message.text)
            url = markdown.quote_html(url)
        else:
            await message.answer('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return

        data = await state.get_data()
        save_channel(channel_id=data.get('chat_id'), title=data.get('chat_title'), url=url)
        await message.answer('‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=Keyboards.get_channels_list())
        await state.finish()

    # –£–¥–∞–ª–µ–Ω–∏–µ
    @staticmethod
    async def handle_delete_channel_callbacks(callback: CallbackQuery, callback_data: dict):
        channel_id = callback_data.get('channel_id')

        if not channel_id:
            await callback.message.edit_text(
                '–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å?',
                reply_markup=Keyboards.get_channels_to_delete()
            )
            return

        delete_channel(channel_id)
        await callback.message.edit_text('–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞')
        await Handlers.handle_channels_list_button(callback.message)

    @classmethod
    def register_add_channel_handlers(cls, dp: Dispatcher) -> None:
        # —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        dp.register_message_handler(cls.handle_channels_list_button, text=Keyboards.reply_button_for_admin_menu.text)

        # –æ—Ç–º–µ–Ω–∞
        dp.register_callback_query_handler(cls.handle_cancel_callback,
                                           channels_list_callback.filter(action='cancel'),
                                           state='*')

        # –ø–æ–∫–∞–∑–∞—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª
        dp.register_callback_query_handler(cls.handle_show_channel_callback,
                                           channels_list_callback.filter(action='show'))

        dp.register_callback_query_handler(cls.handle_toggle_auto_accept_callback,
                                           channels_list_callback.filter(action='toggle_auto_accept'))

        # –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        dp.register_callback_query_handler(cls.handle_add_channel_to_list_callback,
                                           channels_list_callback.filter(action='add'))

        dp.register_message_handler(cls.handle_channel_to_add_post_message,
                                    lambda msg: msg.is_forward(),
                                    state=ChannelAdding.wait_for_post)

        dp.register_message_handler(cls.handle_channel_to_add_url,
                                    state=ChannelAdding.wait_for_url)

        # —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
        dp.register_callback_query_handler(cls.handle_delete_channel_callbacks,
                                           channels_list_callback.filter(action='delete'))
